import pandas as pd
import random
import numpy
from scipy.stats import pearsonr
#returns a data frame that it generates from asking the user questions
def createData(numEmployee=None,pay=None,payVariance=None,age=None,ageVariance=None,ageCorrelation=None,correlationVariance=None):
    header=["id","pay","jobTitle","yearsAtCompany","hiredBy","promotedLastBy","performanceMetric","age","gender","isImmigrant","physicalDisability","neurodivergent","recordOfOffences"]
    dtypes = {
    "id": int,
    "pay": float,
    "age": int,
    #rest of columns need to be added
    }
    data=pd.DataFrame(columns=header).astype(dtypes)
    if(numEmployee is None):
        numEmployee=int(input("enter the number of employess in this company: "))
    if(pay==None):
        pay=int(input("enter a average salarie: "))
    if(payVariance==None):
        payVariance=int(input("enter a pay variance: "))
    if(age==None):
        age=int(input("enter an average age"))
    if(age==None):
        ageVariance=int(input("enter variance for age"))
    if(ageCorrelation==None):
        ageCorrelation=float(input("enter the correlation between age and pay"))
    if(correlationVariance==None):
        correlationVariance=int(input("enter how concistent the correlation is out of 100"))
    
    numManage=10
    #formula for pay change is going to be newPay=pay*(mean(age)-age)*ageCorrelation*correlationVariance
    print("generating", numEmployee, "employees")

    for i in range(numEmployee):
        if numManage>0:
            manage=1
            numManage=numManage-1
        else:
            manage=0
        new_row_df = pd.DataFrame([createEmployee(i, pay-random.randint(-payVariance,payVariance),manage,None,None,None,None,age+random.randint(-ageVariance,ageVariance))], columns=data.columns)
        data = pd.concat([data, new_row_df], ignore_index=True)
        data.loc[i,"pay"]=data.loc[i,"pay"]-((age-data.loc[i,"age"])*ageCorrelation*random.randint(0,correlationVariance)/100)
    print(data)
    return data

#creates an employee as a array and returns it
#employeeNumber	pay	yearsAtCompany	hiredBy	promotedLastBy	performanceMetric	age	gender	isImmigrant	physicalDisability	neurodivergent	recordOfOffences
def createEmployee(id=None,pay=None,jobTitle=None,yearsAtCompany=None,hiredBy=None,promotedLastBy=None,performanceMetric=None,age=None,gender=None,isImmigrant=None,physicalDisability=None,neurodivergent=None,recordOfOffences=None):
    return[id,pay,jobTitle,yearsAtCompany,hiredBy,promotedLastBy,performanceMetric,age,gender,isImmigrant,physicalDisability,neurodivergent,recordOfOffences]

def checkCorrelation(df, col1, col2):
    correlation, pValue = pearsonr(df[col1], df[col2])
    print(f"{correlation:.2f}")
    print(f"{pValue:.2f}")
    return correlation, pValue

#numEmployee=None,pay=None,payVariance=None,age=None,ageVariance=None,ageCorrelation=None,correlationVariance=None
def main():
    df = createData(1000,100,10,30,10,None,100)
    while True:
        compare = input("Enter the categories you would like to compare seperated by a space, enter 'exit' to stop: ")
        if compare.lower() == "exit":
            break
        try:
            firstCol, secondCol = compare.split()
            checkCorrelation(df, firstCol, secondCol)
        except:
            print("Enter two valid column names seperated by a space: ")
main()

