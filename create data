import pandas as pd
import random
import numpy
from scipy.stats import pearsonr
#returns a data frame that it generates from asking the user questions
def createData(numEmployee=None,pay=None,payVariance=None,age=None,ageVariance=None,ageCorrelation=None,correlationVariance=None,genderRatio=50,isImigrantRatio=10,phyisicalDisabilityRatio=5,neurodivergentRatio=10,recordOfOffences=5,years=5,yearsVariance=4,performanceAverage=7,performanceVariance=3):
    header=["id","pay","jobTitle","yearsAtCompany","hiredBy","promotedLastBy","performanceMetric","age","gender","isImmigrant","physicalDisability","neurodivergent","recordOfOffences"]
    dtypes = {
        "id": 'Int64',               # Use nullable Int64 for integers
        "pay": float,
        "jobTitle": 'string',        # Use dedicated Pandas string type
        "yearsAtCompany": 'Int64',
        "hiredBy": 'string',
        "promotedLastBy": 'Int64',
        "performanceMetric": float,  # Added the missing column
        "age": 'Int64',
        "gender": 'Int64',
        "isImmigrant": 'Int64',
        "physicalDisability": 'Int64',
        "neurodivergent": 'Int64',
        "recordOfOffences": 'Int64'
    }
    data=pd.DataFrame(columns=header).astype(dtypes)
    if(numEmployee is None):
        numEmployee=int(input("enter the number of employess in this company: "))
    if(pay==None):
        pay=int(input("enter a average salarie: "))
    if(payVariance==None):
        payVariance=int(input("enter a pay variance: "))
    if(age==None):
        age=int(input("enter an average age"))
    if(age==None):
        ageVariance=int(input("enter variance for age"))
    if(ageCorrelation==None):
        ageCorrelation=float(input("enter the correlation between age and pay"))
    if(correlationVariance==None):
        correlationVariance=int(input("enter how concistent the correlation is out of 100"))
    numPromoters=4
    numManage=10
    #formula for pay change is going to be newPay=pay*(mean(age)-age)*ageCorrelation*correlationVariance
    print("generating", numEmployee, "employees")

    for i in range(numEmployee):
        if numManage>0:
            manage=1
            numManage=numManage-1
        else:
            manage=0
        seed=random.randint(1,100)
        
        new_row_df = pd.DataFrame([createEmployee(i, pay-random.randint(-payVariance,payVariance),manage,years+random.randint(-yearsVariance,yearsVariance),None,random.randint(0,numPromoters),performanceAverage+random.randint(-performanceVariance,performanceVariance),age+random.randint(-ageVariance,ageVariance),pick(seed,genderRatio),pick(seed,isImigrantRatio),pick(seed,phyisicalDisabilityRatio),pick(seed,neurodivergentRatio),pick(seed,recordOfOffences))], columns=data.columns)
        data = pd.concat([data, new_row_df], ignore_index=True)
        data.loc[i,"pay"]=data.loc[i,"pay"]-((age-data.loc[i,"age"])*ageCorrelation*random.randint(0,correlationVariance)/100)
    print(data)
    return data
def pick(seed,ratio):
    if(seed>ratio):
        return 0
    else:
        return 1
#creates an employee as a array and returns it
#employeeNumber	pay	yearsAtCompany	hiredBy	promotedLastBy	performanceMetric	age	gender	isImmigrant	physicalDisability	neurodivergent	recordOfOffences
def createEmployee(id=None,pay=None,jobTitle=None,yearsAtCompany=None,hiredBy=None,promotedLastBy=None,performanceMetric=None,age=None,gender=None,isImmigrant=None,physicalDisability=None,neurodivergent=None,recordOfOffences=None):
    return[id,pay,jobTitle,yearsAtCompany,hiredBy,promotedLastBy,performanceMetric,age,gender,isImmigrant,physicalDisability,neurodivergent,recordOfOffences]

def checkCorrelation(df, col1, col2):
    correlation, pValue = pearsonr(df[col1], df[col2])
    #print(f"{correlation:.2f}")
    #print(f"{pValue:.2f}")
    return correlation, pValue,col1,col2

def printCorrelation(correlation,pValue,col1,col2):
    RED = '\033[91m'
    GREEN = '\033[92m'
    RESET = '\033[0m'
    #print(correlation,pValue)
    if(pValue>0.05):
        print(f"{GREEN}there is no correlation at a 95 percent confidence interval between {col1} and {col2}{RESET}")
    else:
        print(f"{RED}there is evidence there is a correlation between {col1} and {col2}{RESET}")
    print("")


def compareProtected(df,correlator):
    printCorrelation(*(checkCorrelation(df,correlator,"age")))
    printCorrelation(*(checkCorrelation(df,correlator,"gender")))
    printCorrelation(*(checkCorrelation(df,correlator,"isImmigrant")))
    printCorrelation(*(checkCorrelation(df,correlator,"physicalDisability")))
    printCorrelation(*(checkCorrelation(df,correlator,"neurodivergent")))
    printCorrelation(*(checkCorrelation(df,correlator,"recordOfOffences")))


def checkPromoter(df):
    promoters=df['promotedLastBy'].tolist()
    promoters=set(promoters)
    for p in promoters:
        dfCopy =df.copy(deep=True)
        # 1. Select the column and set all values to 0
        dfCopy['promotedLastBy'] = 0

        # 2. Use .loc to select only the rows where the original value *was* 'p' 
        #    and set the corresponding new value to 1
        dfCopy.loc[df['promotedLastBy'] == p, 'promotedLastBy'] = 1
        print(dfCopy)
        print("checking if employer",p,"has systematic bias in there promotion decisions")
        compareProtected(dfCopy,"promotedLastBy")
    

def createCorrelation(df):
    y=input("enter what variable to have a correlation with(pay or hiredBy work best)")
    strength=float(input("enter how strong you want the correlation to be. one Being maximumly strong"))
    x=input("enter what protected class you want to have a correlation with")
    variance=int(input("enter the variance of the correlation. enter 0 for no variance"))
    df[y]=df[y]+df[y]*df[x]*strength
    print(df)
    return df
#numEmployee=None,pay=None,payVariance=None,age=None,ageVariance=None,ageCorrelation=None,correlationVariance=None
def main():
    while True:
        tableData = input("Do you want to generate test data or input a preexisting file?Y/N: ")
        try:
            if tableData == "Y":
                df = createData(1000,100,10,30,10,None,100)
                break
            elif tableData == "N":
                filePath = input("Enter the file path to a csv file").strip()
                df = pd.read_csv(filePath)
                break
        except ValueError:
            print("Enter Y for test data, enter N to input your own file: ")
    while True:
        print("1. Check for corellation's between pay and things protected class's in Ontario human rights law")
        print("2. Check for corellation's between promoters on things protected class's in Ontario human rights law")
        print("3. Creates a correlation in the test data")
        compare = int(input("Enter your input: "))
        if compare==1:
            #print out the wether each function has a correlation
            print("checking everything for comparison")
            compareProtected(df,"pay")
        if compare==2:
            print("checking each employee in charged of promoting for bias's")
            checkPromoter(df)
        if compare==3:
            df=createCorrelation(df)
main()



